---
# A9.1: SQL Server Database Users Check (Simplified - No detection logic)
- name: A9.1 | SQL Server database users check and audit
  ansible.windows.win_powershell:
    script: |
      Write-Output "=== SQL Server Database Users Check ==="
      Write-Output "Current User: $env:USERNAME"
      Write-Output "Domain User: $env:USERDOMAIN\$env:USERNAME"
      Write-Output ""
      
      # Use the same instance discovery as main.yml for consistency
      function Get-SQLServerInstances {
        $instances = @()
        
        # Method 1: Check registry for installed instances
        $regPaths = @(
          "HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server",
          "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Microsoft SQL Server"
        )
        
        foreach ($regPath in $regPaths) {
          if (Test-Path $regPath) {
            try {
              $installedInstances = Get-ItemProperty "$regPath" -Name "InstalledInstances" -ErrorAction SilentlyContinue
              if ($installedInstances.InstalledInstances) {
                foreach ($instance in $installedInstances.InstalledInstances) {
                  if ($instance -eq "MSSQLSERVER") {
                    if ($instances -notcontains "localhost") {
                      $instances += "localhost"
                    }
                  } else {
                    $namedInstance = "localhost\$instance"
                    if ($instances -notcontains $namedInstance) {
                      $instances += $namedInstance
                    }
                  }
                }
              }
            } catch {}
          }
        }
        
        # Method 2: Check running SQL services for named instances
        try {
          $sqlServices = Get-Service -Name "MSSQL`$*" -ErrorAction SilentlyContinue
          foreach ($service in $sqlServices) {
            if ($service.Name -match "MSSQL\$(.+)") {
              $instanceName = $matches[1]
              $instanceConn = "localhost\$instanceName"
              if ($instances -notcontains $instanceConn) {
                $instances += $instanceConn
              }
            }
          }
        } catch {}
        
        # Method 3: Check default instance service
        try {
          $defaultService = Get-Service -Name "MSSQLSERVER" -ErrorAction SilentlyContinue
          if ($defaultService -and $instances -notcontains "localhost") {
            $instances += "localhost"
          }
        } catch {}
        
        # Fallback: If no instances found, add localhost only
        if ($instances.Count -eq 0) {
          $instances += "localhost"
        }
        
        return ($instances | Sort-Object -Unique)
      }
      
      # Get all instances
      $allInstances = Get-SQLServerInstances
      Write-Output "=== A9.1 Audit Target Instances ==="
      foreach ($inst in $allInstances) {
        Write-Output "Target instance: $inst"
      }
      Write-Output ""
      
      # Test connections and run audit if successful
      $successfulConnections = @()
      $failedConnections = @()
      $totalLoginCount = 0
      
      foreach ($instance in $allInstances) {
        Write-Output "=== Testing connection to: $instance ==="
        try {
          $connStr = "Server=$instance;Integrated Security=true;Connection Timeout=5;TrustServerCertificate=true"
          $conn = New-Object System.Data.SqlClient.SqlConnection($connStr)
          $conn.Open()
          
          Write-Output "SUCCESS: Connected to $instance"
          
          # Get user and permission info
          $cmd = New-Object System.Data.SqlClient.SqlCommand("SELECT SUSER_NAME() AS CurrentUser, IS_SRVROLEMEMBER('sysadmin') AS IsSysAdmin, @@VERSION AS SQLVersion, @@SERVERNAME AS ServerName", $conn)
          $reader = $cmd.ExecuteReader()
          
          if ($reader.Read()) {
            $currentUser = $reader["CurrentUser"].ToString()
            $isSysAdmin = $reader["IsSysAdmin"]
            $sqlVersion = $reader["SQLVersion"].ToString()
            $serverName = $reader["ServerName"].ToString()
            
            Write-Output "SQL User: $currentUser"
            Write-Output "Has SysAdmin: $($isSysAdmin -eq 1)"
            Write-Output "Server Name: $serverName"
            Write-Output "SQL Version: $($sqlVersion.Split([char]10)[0])"
            
            $successfulConnections += @{
              "Instance" = $instance
              "ServerName" = $serverName
              "SQLUser" = $currentUser
              "IsSysAdmin" = ($isSysAdmin -eq 1)
              "SQLVersion" = $sqlVersion.Split([char]10)[0]
            }
          }
          $reader.Close()
          
          # If we have sysadmin, run the audit immediately
          if ($isSysAdmin -eq 1) {
            Write-Output ""
            Write-Output "========================================"
            Write-Output "AUDITING INSTANCE: $instance"
            Write-Output "========================================"
            
            Write-Output "Server Name: $serverName"
            Write-Output "SQL Version: $($sqlVersion.Split([char]10)[0])"
            Write-Output ""
            
            # Get login information
            $query = "SELECT sp.name AS LoginName, sp.type_desc AS LoginType, sp.is_disabled AS IsDisabled, sp.create_date AS CreateDate, sp.default_database_name AS DefaultDatabase FROM sys.server_principals sp WHERE sp.type IN ('S', 'U', 'G') ORDER BY sp.name"
            
            $auditCmd = New-Object System.Data.SqlClient.SqlCommand($query, $conn)
            $adapter = New-Object System.Data.SqlClient.SqlDataAdapter($auditCmd)
            $table = New-Object System.Data.DataTable
            $adapter.Fill($table)
            
            Write-Output "Total Logins Found: $($table.Rows.Count)"
            $totalLoginCount += $table.Rows.Count
            Write-Output ""
            Write-Output "LoginName`tLoginType`tDisabled`tCreateDate`tDefaultDB"
            Write-Output "------------------------------------------------------------"
            
            foreach ($row in $table.Rows) {
              $loginName = $row["LoginName"]
              $loginType = $row["LoginType"]
              $disabled = $row["IsDisabled"]
              $createDate = $row["CreateDate"]
              $defaultDb = $row["DefaultDatabase"]
              Write-Output "$loginName`t$loginType`t$disabled`t$createDate`t$defaultDb"
            }
            
            Write-Output ""
            Write-Output "Instance $instance audit completed successfully"
          }
          
          $conn.Close()
          
        } catch {
          Write-Output "FAILED: $($_.Exception.Message)"
          $failedConnections += @{
            "Instance" = $instance
            "Error" = $_.Exception.Message
          }
        }
        Write-Output ""
      }
      
      Write-Output "========================================"
      Write-Output "FINAL SUMMARY"
      Write-Output "========================================"
      Write-Output "Total Instances Found: $($allInstances.Count)"
      Write-Output "Successful Connections: $($successfulConnections.Count)"
      Write-Output "Failed Connections: $($failedConnections.Count)"
      Write-Output "Total Logins Across All Instances: $totalLoginCount"
      Write-Output ""
      
      if ($successfulConnections.Count -gt 0) {
        Write-Output "=== SUCCESSFUL CONNECTIONS ==="
        foreach ($conn in $successfulConnections) {
          Write-Output "Instance: $($conn.Instance) ($($conn.ServerName))"
          Write-Output "  SQL User: $($conn.SQLUser)"
          if ($conn.IsSysAdmin) {
            Write-Output "  Permissions: SYSADMIN - CAN RUN A9.1 AUDIT"
          } else {
            Write-Output "  Permissions: NO SYSADMIN - CANNOT RUN A9.1 AUDIT"
          }
          Write-Output ""
        }
      }
      
      # Overall status
      $hasAnySysAdmin = $successfulConnections | Where-Object { $_.IsSysAdmin -eq $true }
      if ($hasAnySysAdmin) {
        Write-Output "OVERALL STATUS: CAN RUN A9.1 AUDIT (at least one instance has sysadmin)"
      } elseif ($successfulConnections.Count -gt 0) {
        Write-Output "OVERALL STATUS: PARTIAL - Can connect but no sysadmin privileges"
      } else {
        Write-Output "OVERALL STATUS: FAILED - Cannot connect to any SQL Server instances"
      }
      
      Write-Output "Combined permission check and audit completed"
  register: sql_combined_result

- name: Display combined results
  debug:
    var: sql_combined_result.output

- name: Set SQL permission status
  set_fact:
    sql_has_sysadmin: "{{ 'SYSADMIN - CAN RUN A9.1 AUDIT' in (sql_combined_result.output | join(' ')) }}"
    sql_can_connect: "{{ 'Successful Connections:' in (sql_combined_result.output | join(' ')) and not 'Successful Connections: 0' in (sql_combined_result.output | join(' ')) }}"

- name: Show final status
  debug:
    msg: |
      FINAL SQL SERVER PERMISSION STATUS:
      
      Can Connect to SQL Server: {{ sql_can_connect }}
      Has SysAdmin Privileges: {{ sql_has_sysadmin }}
      
      {% if sql_has_sysadmin %}
      READY: The A9.1 audit task will work!
      {% elif sql_can_connect %}
      PARTIAL: Can connect but need sysadmin privileges
      {% else %}
      BLOCKED: Cannot connect to SQL Server
      {% endif %}

- name: A9.1 | Build audit details for all scenarios
  set_fact:
    a9_1_user_details: |
      {%- if sql_has_sysadmin | default(false) and sql_combined_result.output is defined -%}
      {%- for line in sql_combined_result.output -%}
      {{ line }}
      {% endfor -%}
      {%- elif sql_can_connect | default(false) -%}
      SQL Server connection successful but insufficient privileges.
      Current user can connect but does not have sysadmin role membership.
      Sysadmin privileges required for security audit compliance checks.
      {%- elif sql_combined_result.output is defined -%}
      SQL Server connection attempt made but failed.
      {% for line in sql_combined_result.output %}{{ line }}
      {% endfor %}
      {%- else -%}
      SQL Server not detected or accessible on this system.
      No SQL Server services found or connection attempts failed.
      {%- endif -%}

- name: A9.1 | Determine status for all hosts
  set_fact:
    a9_1_status: >-
      {%- if sql_has_sysadmin | default(false) -%}
      OK
      {%- elif sql_can_connect | default(false) -%}
      Partial
      {%- else -%}
      Fail
      {%- endif -%}

- name: A9.1 | Build expected and actual text for all hosts
  set_fact:
    a9_1_expected_text: |-
      SQL Server user list retrieved from all unique instances showing logins, user types, and account details.
    a9_1_actual_text: "{{ a9_1_user_details }}"

- name: A9.1 | Add to OS checks structure
  set_fact:
    win_os_checks_struct: >-
      {{
        win_os_checks_struct |
        combine({
          inventory_hostname: (
            win_os_checks_struct[inventory_hostname] |
            combine({
              'checks': (win_os_checks_struct[inventory_hostname].checks + [{
                'control': 'A9.1',
                'method': 'T-SQL: sys.server_principals query (combined check & audit)',
                'expected': a9_1_expected_text,
                'actual': a9_1_actual_text,
                'status': a9_1_status
              }])
            }, recursive=True)
          )
        }, recursive=True)
      }}

- name: A9.1 | Debug - Show OS structure for this host
  debug:
    msg: |
      Host: {{ inventory_hostname }}
      MSSQL Detected: {{ mssql_detected | default(false) }}
      Can Connect: {{ sql_can_connect | default(false) }}
      Has SysAdmin: {{ sql_has_sysadmin | default(false) }}
      Status: {{ a9_1_status }}
      Added to OS Checks: {{ (win_os_checks_struct[inventory_hostname].checks | selectattr('control', 'equalto', 'A9.1') | list | length) > 0 }}